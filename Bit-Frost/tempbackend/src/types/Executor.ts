/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener,
  } from "ethers";
  import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod,
  } from "./comman.js";
  
  export interface ExecutorInterface extends Interface {
    getFunction(
      nameOrSignature:
        | "createAndRegisterToken"
        | "groupPubKey"
        | "lock"
        | "mint"
        | "orderRegistery"
        | "owner"
        | "setGroupAccount"
        | "tokenCount"
    ): FunctionFragment;
  
    getEvent(nameOrSignatureOrTopic: "GroupAccountUpdated"): EventFragment;
  
    encodeFunctionData(
      functionFragment: "createAndRegisterToken",
      values: [string, string, BigNumberish, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "groupPubKey",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "lock",
      values: [AddressLike, BytesLike, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "mint",
      values: [AddressLike, BigNumberish, AddressLike, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "orderRegistery",
      values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "setGroupAccount",
      values: [BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "tokenCount",
      values?: undefined
    ): string;
  
    decodeFunctionResult(
      functionFragment: "createAndRegisterToken",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "groupPubKey",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "orderRegistery",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "setGroupAccount",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
  }
  
  export namespace GroupAccountUpdatedEvent {
    export type InputTuple = [
      oldGroupAccount: BytesLike,
      newGroupAccount: BytesLike
    ];
    export type OutputTuple = [oldGroupAccount: string, newGroupAccount: string];
    export interface OutputObject {
      oldGroupAccount: string;
      newGroupAccount: string;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
  }
  
  export interface Executor extends BaseContract {
    connect(runner?: ContractRunner | null): Executor;
    waitForDeployment(): Promise<this>;
  
    interface: ExecutorInterface;
  
    queryFilter<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
  
    on<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    once<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    listeners<TCEvent extends TypedContractEvent>(
      event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
      event?: TCEvent
    ): Promise<this>;
  
    createAndRegisterToken: TypedContractMethod<
      [name: string, symbol: string, decimals: BigNumberish, sig: BytesLike],
      [string],
      "nonpayable"
    >;
  
    groupPubKey: TypedContractMethod<[], [string], "view">;
  
    lock: TypedContractMethod<
      [token: AddressLike, orderHash: BytesLike, amount: BigNumberish],
      [void],
      "nonpayable"
    >;
  
    mint: TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, to: AddressLike, sig: BytesLike],
      [void],
      "nonpayable"
    >;
  
    orderRegistery: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  
    owner: TypedContractMethod<[], [string], "view">;
  
    setGroupAccount: TypedContractMethod<
      [_groupPubKey: BytesLike, sig: BytesLike],
      [void],
      "nonpayable"
    >;
  
    tokenCount: TypedContractMethod<[], [bigint], "view">;
  
    getFunction<T extends ContractMethod = ContractMethod>(
      key: string | FunctionFragment
    ): T;
  
    getFunction(
      nameOrSignature: "createAndRegisterToken"
    ): TypedContractMethod<
      [name: string, symbol: string, decimals: BigNumberish, sig: BytesLike],
      [string],
      "nonpayable"
    >;
    getFunction(
      nameOrSignature: "groupPubKey"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
      nameOrSignature: "lock"
    ): TypedContractMethod<
      [token: AddressLike, orderHash: BytesLike, amount: BigNumberish],
      [void],
      "nonpayable"
    >;
    getFunction(
      nameOrSignature: "mint"
    ): TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, to: AddressLike, sig: BytesLike],
      [void],
      "nonpayable"
    >;
    getFunction(
      nameOrSignature: "orderRegistery"
    ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
    getFunction(
      nameOrSignature: "owner"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
      nameOrSignature: "setGroupAccount"
    ): TypedContractMethod<
      [_groupPubKey: BytesLike, sig: BytesLike],
      [void],
      "nonpayable"
    >;
    getFunction(
      nameOrSignature: "tokenCount"
    ): TypedContractMethod<[], [bigint], "view">;
  
    getEvent(
      key: "GroupAccountUpdated"
    ): TypedContractEvent<
      GroupAccountUpdatedEvent.InputTuple,
      GroupAccountUpdatedEvent.OutputTuple,
      GroupAccountUpdatedEvent.OutputObject
    >;
  
    filters: {
      "GroupAccountUpdated(bytes32,bytes32)": TypedContractEvent<
        GroupAccountUpdatedEvent.InputTuple,
        GroupAccountUpdatedEvent.OutputTuple,
        GroupAccountUpdatedEvent.OutputObject
      >;
      GroupAccountUpdated: TypedContractEvent<
        GroupAccountUpdatedEvent.InputTuple,
        GroupAccountUpdatedEvent.OutputTuple,
        GroupAccountUpdatedEvent.OutputObject
      >;
    };
  }
  